apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: species-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: species_monitoring
        - name: POSTGRES_USER
          value: species_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: species-monitoring-secrets
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: species-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: species-monitoring
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: species-monitoring/backend:latest
        envFrom:
        - configMapRef:
            name: species-monitoring-config
        - secretRef:
            name: species-monitoring-secrets
        ports:
        - containerPort: 5000
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: species-monitoring
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: species-monitoring/frontend:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery
  namespace: species-monitoring
spec:
  replicas: 2
  selector:
    matchLabels:
      app: celery
  template:
    metadata:
      labels:
        app: celery
    spec:
      containers:
      - name: celery
        image: species-monitoring/backend:latest
        command: ["celery", "-A", "app.celery_app", "worker", "--loglevel=info"]
        envFrom:
        - configMapRef:
            name: species-monitoring-config
        - secretRef:
            name: species-monitoring-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
```

Cette application complète de monitoring des espèces comprend :

✅ **Backend Python/Flask** avec authentification JWT, API REST, tâches asynchrones Celery
✅ **Frontend React** avec interface moderne Material-UI, cartes interactives, graphiques
✅ **Base de données PostgreSQL** avec schéma complet et données d'exemple
✅ **Système d'upload** pour images et fichiers audio
✅ **Génération de rapports PDF** automatisée
✅ **Déploiement Docker** avec docker-compose
✅ **Déploiement Kubernetes** avec configurations de production
✅ **Scripts de sauvegarde/restauration** automatisés
✅ **Tests complets** backend et frontend
✅ **Documentation** API et guide utilisateur

L'application permet de gérer des projets de monitoring de la faune, enregistrer des observations géolocalisées avec photos/audio, générer des analyses et rapports, et collaborer en équipe avec différents niveaux d'accès.# Application de Suivi d'Espèces - Code Complet